/**
 * copyright Ed Sweeney, 2012, 2013 all rights reserved
 */
package com.onextent.augie.camera.shutter;

import android.app.Dialog;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnFocusChangeListener;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.Spinner;

import com.actionbarsherlock.app.SherlockDialogFragment;
import com.onextent.android.codeable.Codeable;
import com.onextent.android.ui.SpinnerUI;
import com.onextent.android.ui.UiUtil;
import com.onextent.augie.AugieActivity;
import com.onextent.augie.Mode;
import com.onextent.augie.ModeManager;
import com.onextent.augie.R;
import com.onextent.augie.camera.AugCamera;
import com.onextent.augie.camera.AugCameraException;
import com.onextent.augie.camera.NamedInt;

public class TouchFocusShutterDialog extends SherlockDialogFragment {

    TouchShutter augiement;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        AugieActivity activity = (AugieActivity) getActivity();
        augiement = (TouchShutter) 
                activity.getModeManager().getCurrentMode()
                .getAugiements()
                .get(TouchShutter.AUGIE_NAME);

        Dialog d = getDialog();
        if (d != null) d.setTitle("Touch Shutter Settings");
        View v = inflater.inflate(R.layout.shutter_settings, container, false);
        try {
            ModeManager modeManager = activity.getModeManager();
            Mode mode = modeManager.getCurrentMode();
            AugCamera camera = mode.getCamera();

            setFocusAreaColorUI(v, camera);
            setMeterAreaColorUI(v, camera);
            setAlwaysSetFaUI(v, camera);
            setDefaultFocusSz(v, camera);

        } catch (Exception e) {
            Log.e(Codeable.TAG, e.toString(), e);
        }

        return v;
    }

    private void setMeterAreaColorUI(View v, AugCamera camera) {

        Spinner spinner = (Spinner) v.findViewById(R.id.meter_area_camera_colors);
        if (spinner == null) throw new java.lang.NullPointerException("spnner is null");
        SpinnerUI<NamedInt> sui = new SpinnerUI<NamedInt>(spinner, UiUtil.COLOR_LIST) {
            @Override
            public int calculatePos() {
                int c = augiement.getMeterAreaColor();
                for (int i = 0; i < UiUtil.COLOR_LIST.size(); i++) {
                    if (UiUtil.COLOR_LIST.get(i).toInt() == c) return i;
                }
                return 0;
            }
            @Override
            public void setMode(NamedInt m) {
                augiement.setMeterAreaColor(m.toInt());
            }
        };
        sui.init();
    }

    private void setFocusAreaColorUI(View v, final AugCamera camera) {

        Spinner spinner = (Spinner) v.findViewById(R.id.focus_area_camera_colors);
        if (spinner == null) throw new java.lang.NullPointerException("spnner is null");
        SpinnerUI<NamedInt> sui = new SpinnerUI<NamedInt>(spinner, UiUtil.COLOR_LIST) {
            @Override
            public int calculatePos() {
                int c = augiement.getFocusAreaColor();
                for (int i = 0; i < UiUtil.COLOR_LIST.size(); i++) {
                    if (UiUtil.COLOR_LIST.get(i).toInt() == c) return i;
                }
                return 0;
            }
            @Override
            public void setMode(NamedInt m) {
                augiement.setFocusAreaColor(m.toInt());
            }
        };
        sui.init();
    }

    private void setAlwaysSetFaUI(View v, AugCamera camera) {

        CheckBox cbox = (CheckBox) v.findViewById(R.id.alwaysSetFocusArea);

        boolean isEnabled = augiement.isAlways_set_focus_area();
        cbox.setChecked(isEnabled);

        cbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                augiement.setAlways_set_focus_area(isChecked);
            }
        });
    }
   
    private void setDefaultFocusSz(View v, AugCamera camera) {

        Spinner spinner = (Spinner) v.findViewById(R.id.defaultFocusAreaSz);
        if (spinner == null) throw new java.lang.NullPointerException("spnner is null");
        Integer[] sizes = new Integer[90];
        for (int i = 0; i < sizes.length; i++  ) {
            sizes[i] = i + 1;
        }
        SpinnerUI<Integer> sui = new SpinnerUI<Integer>(spinner, sizes, camera) {
            @Override
            public int calculatePos() {
                //int c = augiement.getFocusAreaColor();
                //for (int i = 0; i < UiUtil.COLOR_LIST.size(); i++) {
                //    if (UiUtil.COLOR_LIST.get(i).toInt() == c) return i;
                //}
                return 0;
            }
            @Override
            public void setMode(Integer m) {
                augiement.setFocusAreaColor(m.toInt());
            }
        };
        sui.init();
    }

    /*
    private void setDefaultFocusSz(View v, AugCamera camera) {

        final EditText tbox = (EditText) v.findViewById(R.id.defaultFocusAreaSz);

        int sz = augiement.getTouchFocusSz();
        tbox.setText(Integer.toString(sz));
       
        OnFocusChangeListener l = new OnFocusChangeListener() {
            
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                augiement.setTouchFocusSz(Integer.getInteger(tbox.getText().toString(), 10));
            }
        };
        
        tbox.setOnFocusChangeListener(l);
    }
     */
}
