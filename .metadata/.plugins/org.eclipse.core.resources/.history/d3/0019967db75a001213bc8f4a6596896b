package com.onextent.augie.camera;

import java.util.HashSet;
import java.util.Set;
import android.graphics.Point;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import com.onextent.augie.AugieScape;
import com.onextent.augie.Augiement;
import com.onextent.augie.AugiementException;
import com.onextent.augie.AugiementName;
import com.onextent.util.codeable.Code;
import com.onextent.util.codeable.CodeableException;
import com.onextent.util.codeable.CodeableName;

public class PinchZoom implements Augiement, OnTouchListener {

    public static final CodeableName AUGIE_NAME = new AugiementName("AUGIE/FEATURES/PINCH_ZOOM");
    
    private AugieScape augview;
    private Point p1, p2;
    private AugCamera camera;
    double initDist = -1;
    
    @Override
    public CodeableName getCodeableName() {
        return AUGIE_NAME;
    }

    @Override
    public Code getCode() throws CodeableException {
        return null;
    }

    @Override
    public void setCode(Code code) throws CodeableException {
    }

    @Override
    public void updateCanvas() { }

    @Override
    public void clear() { }

    @Override
    public void stop() { }

    @Override
    public void resume() { }

    @Override
    public void onCreate(AugieScape av, 
                         Set<Augiement> helpers) 
                         throws AugiementException {
        
        augview = av;

        for (Augiement a : helpers) {
            
            if (a instanceof AugCamera) camera = (AugCamera) a;
            
        }
            
        if (camera == null) throw new AugiementException("camera feature is null");
    }

    private final static Set<CodeableName> deps;
    static {
        deps = new HashSet<CodeableName>();
        deps.add(AugCamera.AUGIENAME);
    }

	@Override
    public Set<CodeableName> getDependencyNames() {
        return deps;
    }
	
	private void zoom(double dist) {
	    /*
	     * todo: fix buggy, zoom is not smooth and jumps to max too easily
	     */
	   
	    if (initDist < 0) {
	        initDist = dist;
	        return;
	    }
	   
	    try {
	        double max = camera.getParameters().getMaxZoom(); 
	        double newzoom;
	        double max20 = max / 20;
	        if (dist < max20) newzoom = 0;
	        else if (dist > (max - max20)) newzoom = max;
	        else {
	            double czoom = camera.getParameters().getZoom(); 
	            double change = dist - initDist;
	            double scale = change / augview.getHeight();
	            double zoomchg = max * scale;
	            newzoom = czoom + (zoomchg);
	            if (newzoom > max) newzoom = max;
	            if (newzoom < 0) newzoom = 0;
	        }
	        camera.getParameters().setZoom((int) newzoom);
	        camera.applyParameters();
	    } catch (Throwable e) {
	        Log.e(TAG, e.toString(), e);
	    }
	}
	    
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        try {

            switch(event.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                p1 = new Point((int) event.getX(), (int) event.getY());
                break;

            case MotionEvent.ACTION_MOVE:

                if (p1 == null || p2 == null) return false;
                float distx = event.getX(0) - event.getX(1);
                float disty = event.getY(0) - event.getY(1);
                double dist= Math.sqrt(distx * distx + disty * disty);
                zoom(dist);
                break;

            case MotionEvent.ACTION_POINTER_DOWN:
                p2 = new Point((int) event.getX(), (int) event.getY());
                break;

            case MotionEvent.ACTION_POINTER_UP:
            case MotionEvent.ACTION_UP:
                p1 = null;
                p2 = null;
                initDist = -1;
                
            default:
            }
        } catch (Exception e) {
            Log.e(TAG, e.toString(), e);
        }
        return false;
    }

    @Override
    public String getUIName() {

        return "Pinch Zoom";
    }
}
